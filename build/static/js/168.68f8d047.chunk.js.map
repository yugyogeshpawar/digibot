{"version":3,"sources":["pages/dashboard/StackingSummary.js"],"names":["StackingSummary","dispatch","useDispatch","stackingsummary","useSelector","state","user","useState","page","setPage","rowsPerPage","setRowsPerPage","searchTerm","setSearchTerm","useEffect","getStackingSummary","filteredData","filter","row","investType","toLowerCase","includes","emptyRows","Math","min","length","title","sx","mb","label","value","onChange","e","target","m","minWidth","colSpan","align","variant","slice","map","ind","direction","alignItems","spacing","format","Date","date","mintingGUSD","Number","mintingDGB","toFixed","href","hash","rel","status","color","style","height","p","display","justifyContent","count","ceil","event","newPage","shape","marginLeft","parseInt"],"mappings":"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","file":"static/js/168.68f8d047.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/no-onchange */\r\n/* eslint-disable react/jsx-no-comment-textnodes */\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  Table,\r\n  CardHeader,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  Typography,\r\n  TableContainer,\r\n  Divider,\r\n  Box,\r\n  Stack,\r\n  Button,\r\n  TextField,\r\n  Pagination\r\n} from '@material-ui/core';\r\n\r\nimport format from 'date-fns/format';\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getStackingSummary, mintingSummaryapi } from '../../redux/slices/user';\r\nimport Scrollbar from '../../components/Scrollbar';\r\n\r\nexport default function StackingSummary() {\r\n  const dispatch = useDispatch();\r\n  const { stackingsummary } = useSelector((state) => state.user);\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  useEffect(() => {\r\n    dispatch(getStackingSummary());\r\n  }, [dispatch]);\r\n\r\n  const filteredData = stackingsummary?.filter((row) =>\r\n    row.investType.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleRowsPerPageChange = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(1);\r\n  };\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, filteredData?.length - (page - 1) * rowsPerPage);\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"Trading Summary\" sx={{ mb: 3 }} />\r\n      <TextField\r\n        label=\"Search by Type\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n        sx={{ m: 2 }}\r\n      />\r\n      <Scrollbar>\r\n        <TableContainer sx={{ minWidth: 720 }}>\r\n          <Table>\r\n            <TableHead>\r\n              {' '}\r\n              <TableRow>\r\n                <TableCell sx={{ minWidth: 120 }}>No.</TableCell>\r\n                <TableCell sx={{ minWidth: 120 }}>Date</TableCell>\r\n                <TableCell sx={{ minWidth: 120 }}>Type</TableCell>\r\n                <TableCell sx={{ minWidth: 120 }}>Minting USDT</TableCell>\r\n                <TableCell sx={{ minWidth: 120 }}>Minting digibot</TableCell>\r\n                <TableCell sx={{ minWidth: 120 }}>Transaction Hash</TableCell>\r\n                <TableCell sx={{ minWidth: 120 }}>Status</TableCell>\r\n                <TableCell />\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {' '}\r\n              {filteredData?.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={8} align=\"center\">\r\n                    <Typography variant=\"subtitle1\">No Data Found</Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                (rowsPerPage > 0\r\n                  ? filteredData?.slice((page - 1) * rowsPerPage, page * rowsPerPage)\r\n                  : filteredData\r\n                )?.map((row, ind) => (\r\n                  <TableRow key={ind}>\r\n                    <TableCell>\r\n                      <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                        <Typography variant=\"subtitle2\">{ind + 1}</Typography>\r\n                      </Stack>\r\n                    </TableCell>\r\n                    <TableCell>{format(new Date(row?.date * 1000), 'dd MMM yyyy')}</TableCell>\r\n                    <TableCell>{row?.investType}</TableCell>\r\n                    <TableCell>{row?.mintingGUSD}</TableCell>\r\n                    <TableCell>{Number(row?.mintingDGB).toFixed(2)}</TableCell>\r\n                    <TableCell>\r\n                      <a href={`https://digiexplorer.info/tx/${row?.hash}`} target=\"_blank\" rel=\"noreferrer\">\r\n                        {' '}\r\n                        <Button variant=\"contained\">Show Transaction</Button>{' '}\r\n                      </a>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {row?.status === 1 ? <Box color=\"green\"> Active </Box> : <Box color=\"red\"> Inactive </Box>}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              )}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: 53 * emptyRows }}>\r\n                  <TableCell colSpan={8} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Scrollbar>\r\n      <Divider />\r\n      <Box sx={{ p: 2, display: 'flex', justifyContent: 'flex-end' }}>\r\n        <Pagination\r\n          count={Math.ceil(filteredData?.length / rowsPerPage)}\r\n          page={page}\r\n          onChange={handlePageChange}\r\n          variant=\"outlined\"\r\n          shape=\"rounded\"\r\n        />\r\n        <Box sx={{ marginLeft: 2 }}>\r\n          <Typography variant=\"body2\">\r\n            Rows per page:\r\n            <select value={rowsPerPage} onChange={handleRowsPerPageChange}>\r\n              <option value={10}>10</option>\r\n              <option value={25}>25</option>\r\n              <option value={50}>50</option>\r\n            </select>\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n"],"sourceRoot":""}