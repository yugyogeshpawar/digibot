{"version":3,"sources":["pages/dashboard/NFTCheckout.js"],"names":["STEPS","QontoConnector","withStyles","theme","alternativeLabel","top","left","right","active","borderColor","palette","primary","main","completed","line","borderTopWidth","divider","StepConnector","QontoStepIcon","sx","zIndex","width","height","display","alignItems","justifyContent","color","bgcolor","component","Icon","icon","checkmarkFill","borderRadius","backgroundColor","NFTCheckout","useState","activeStep","billing","themeStretch","useSettings","dispatch","useDispatch","isMountedRef","useIsMountedRef","checkout","useSelector","state","product","cart","isComplete","length","useEffect","current","getCart","createBilling","title","maxWidth","heading","links","name","href","PATH_DASHBOARD","root","eCommerce","container","item","xs","md","mb","connector","map","label","StepIconComponent","typography","open"],"mappings":"yXA0BMA,EAAQ,CAAC,OAAQ,WAEjBC,EAAiBC,aAAW,SAACC,GAAD,MAAY,CAC5CC,iBAAkB,CAChBC,IAAK,GACLC,KAAM,oBACNC,MAAO,oBAETC,OAAQ,CACN,UAAW,CAAEC,YAAaN,EAAMO,QAAQC,QAAQC,OAElDC,UAAW,CACT,UAAW,CAAEJ,YAAaN,EAAMO,QAAQC,QAAQC,OAElDE,KAAM,CACJC,eAAgB,EAChBN,YAAaN,EAAMO,QAAQM,YAdRd,CAgBnBe,KAOJ,SAASC,EAAT,GAA+C,IAAtBV,EAAqB,EAArBA,OAAQK,EAAa,EAAbA,UAC/B,OACE,cAAC,IAAD,CACEM,GAAI,CACFC,OAAQ,EACRC,MAAO,GACPC,OAAQ,GACRC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,MAAOlB,EAAS,eAAiB,UACjCmB,QAAS,sBATb,SAYGd,EACC,cAAC,IAAD,CAAKe,UAAWC,IAAMC,KAAMC,IAAeZ,GAAI,CAAEC,OAAQ,EAAGC,MAAO,GAAIC,OAAQ,GAAII,MAAO,kBAE1F,cAAC,IAAD,CACEP,GAAI,CACFE,MAAO,EACPC,OAAQ,EACRU,aAAc,MACdC,gBAAiB,oBAQd,SAASC,IACtB,MAAkCC,mBAAS,CACzCC,WAAY,EACZC,QAAS,OAFX,mBAIQC,GAJR,UAIyBC,cAAjBD,cACFE,EAAWC,cACXC,EAAeC,cACbC,EAAaC,aAAY,SAACC,GAAD,OAAWA,EAAMC,WAA1CH,SACAI,EAA8BJ,EAA9BI,KAAMX,EAAwBO,EAAxBP,QAASD,EAAeQ,EAAfR,WACjBa,EAAab,IAAepC,EAAMkD,OAcxC,OAZAC,qBAAU,WACJT,EAAaU,SACfZ,EAASa,YAAQL,MAElB,CAACR,EAAUE,EAAcM,IAE5BG,qBAAU,WACW,IAAff,GACFI,EAASc,YAAc,SAExB,CAACd,EAAUJ,IAGZ,cAAC,IAAD,CAAMmB,MAAM,gCAAZ,SACE,eAAC,IAAD,CAAWC,UAAUlB,GAAuB,KAA5C,UACE,cAAC,IAAD,CACEmB,QAAQ,WACRC,MAAO,CACL,CAAEC,KAAM,YAAaC,KAAMC,IAAeC,MAC1C,CACEH,KAAM,cACNC,KAAMC,IAAeE,UAAUD,MAEjC,CAAEH,KAAM,eAIZ,cAAC,IAAD,CAAMK,WAAS,EAACvC,eAAgBwB,EAAa,SAAW,aAAxD,SACE,cAAC,IAAD,CAAMgB,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGhD,GAAI,CAAEiD,GAAI,GAApC,SACE,cAAC,IAAD,CAAShE,kBAAgB,EAACgC,WAAYA,EAAYiC,UAAW,cAACpE,EAAD,IAA7D,SACGD,EAAMsE,KAAI,SAACC,GAAD,OACT,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,kBAAmBtD,EACnBC,GAAI,CACF,wBAAyB,CACvBsD,WAAY,YACZ/C,MAAO,kBALb,SASG6C,KAVMA,YAkBjBtB,EAMA,cAAC,IAAD,CAAuByB,KAAMzB,IAL7B,qCACkB,IAAfb,GAAoB,cAAC,IAAD,IACL,IAAfA,GAAoBC,GAAW,cAAC,IAAD","file":"static/js/165.f53551c3.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport checkmarkFill from '@iconify/icons-eva/checkmark-fill';\r\n// material\r\nimport { Box, Grid, Step, Stepper, Container, StepLabel, StepConnector } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/styles';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getCart, createBilling } from '../../redux/slices/product';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useIsMountedRef from '../../hooks/useIsMountedRef';\r\nimport useSettings from '../../hooks/useSettings';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport {\r\n  CheckoutNFTCart,\r\n  CheckoutOrderComplete,\r\n  NFTCheckoutBillingAddress,\r\n  NFTCheckoutPayment\r\n} from '../../components/_dashboard/e-commerce/checkout';\r\n// ----------------------------------------------------------------------\r\n\r\nconst STEPS = ['Cart', 'Payment'];\r\n\r\nconst QontoConnector = withStyles((theme) => ({\r\n  alternativeLabel: {\r\n    top: 10,\r\n    left: 'calc(-50% + 20px)',\r\n    right: 'calc(50% + 20px)'\r\n  },\r\n  active: {\r\n    '& $line': { borderColor: theme.palette.primary.main }\r\n  },\r\n  completed: {\r\n    '& $line': { borderColor: theme.palette.primary.main }\r\n  },\r\n  line: {\r\n    borderTopWidth: 2,\r\n    borderColor: theme.palette.divider\r\n  }\r\n}))(StepConnector);\r\n\r\nQontoStepIcon.propTypes = {\r\n  active: PropTypes.bool,\r\n  completed: PropTypes.bool\r\n};\r\n\r\nfunction QontoStepIcon({ active, completed }) {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        zIndex: 9,\r\n        width: 24,\r\n        height: 24,\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        color: active ? 'primary.main' : 'divider',\r\n        bgcolor: 'background.default'\r\n      }}\r\n    >\r\n      {completed ? (\r\n        <Box component={Icon} icon={checkmarkFill} sx={{ zIndex: 1, width: 20, height: 20, color: 'primary.main' }} />\r\n      ) : (\r\n        <Box\r\n          sx={{\r\n            width: 8,\r\n            height: 8,\r\n            borderRadius: '50%',\r\n            backgroundColor: 'currentColor'\r\n          }}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default function NFTCheckout() {\r\n  const [checkoutD, setCheckoutD] = useState({\r\n    activeStep: 0,\r\n    billing: null\r\n  });\r\n  const { themeStretch } = useSettings();\r\n  const dispatch = useDispatch();\r\n  const isMountedRef = useIsMountedRef();\r\n  const { checkout } = useSelector((state) => state.product);\r\n  const { cart, billing, activeStep } = checkout;\r\n  const isComplete = activeStep === STEPS.length;\r\n\r\n  useEffect(() => {\r\n    if (isMountedRef.current) {\r\n      dispatch(getCart(cart));\r\n    }\r\n  }, [dispatch, isMountedRef, cart]);\r\n\r\n  useEffect(() => {\r\n    if (activeStep === 0) {\r\n      dispatch(createBilling(null));\r\n    }\r\n  }, [dispatch, activeStep]);\r\n\r\n  return (\r\n    <Page title=\"Ecommerce: Checkout | Digibot\">\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Checkout\"\r\n          links={[\r\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\r\n            {\r\n              name: 'Marketplace',\r\n              href: PATH_DASHBOARD.eCommerce.root\r\n            },\r\n            { name: 'Checkout' }\r\n          ]}\r\n        />\r\n\r\n        <Grid container justifyContent={isComplete ? 'center' : 'flex-start'}>\r\n          <Grid item xs={12} md={8} sx={{ mb: 5 }}>\r\n            <Stepper alternativeLabel activeStep={activeStep} connector={<QontoConnector />}>\r\n              {STEPS.map((label) => (\r\n                <Step key={label}>\r\n                  <StepLabel\r\n                    StepIconComponent={QontoStepIcon}\r\n                    sx={{\r\n                      '& .MuiStepLabel-label': {\r\n                        typography: 'subtitle2',\r\n                        color: 'text.disabled'\r\n                      }\r\n                    }}\r\n                  >\r\n                    {label}\r\n                  </StepLabel>\r\n                </Step>\r\n              ))}\r\n            </Stepper>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {!isComplete ? (\r\n          <>\r\n            {activeStep === 0 && <CheckoutNFTCart />}\r\n            {activeStep === 1 && billing && <NFTCheckoutPayment />}\r\n          </>\r\n        ) : (\r\n          <CheckoutOrderComplete open={isComplete} />\r\n        )}\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}