{"version":3,"sources":["components/authentication/reset-password/ChangePasswordForm.js","components/authentication/reset-password/ResetPasswordForm.js","pages/authentication/ResetPassword.js"],"names":["process","PORT","baseUrl","ResetPasswordForm","onSent","onGetEmail","resetPassword","useAuth","isMountedRef","useIsMountedRef","navigate","useNavigate","enqueueSnackbar","useSnackbar","ResetPasswordSchema","Yup","shape","email","required","verifyEmail","a","axios","post","userId","response","status","variant","data","message","console","log","formik","useFormik","initialValues","validationSchema","onSubmit","values","setErrors","setSubmitting","current","sessionStorage","setItem","error","afterSubmit","errors","touched","isSubmitting","handleSubmit","getFieldProps","value","autoComplete","noValidate","Stack","spacing","Alert","severity","TextField","fullWidth","type","label","Boolean","helperText","LoadingButton","size","loading","RootStyle","styled","Page","display","minHeight","alignItems","justifyContent","padding","theme","ResetPassword","useState","setEmail","setSent","title","sx","maxWidth","mx","paragraph","color","mb","component","RouterLink","to","PATH_AUTH","login","mt"],"mappings":"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","file":"static/js/131.ebc9aef9.chunk.js","sourcesContent":["import * as Yup from 'yup';\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useNavigate, Link as RouterLink } from 'react-router-dom';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\nimport { useSnackbar } from 'notistack5';\r\n// material\r\nimport { TextField, Alert, Stack } from '@material-ui/core';\r\nimport { LoadingButton } from '@material-ui/lab';\r\nimport axios from 'axios';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\r\n\r\nconst baseUrl = process.env.PORT || 'https://digibot.co/api/v1/api';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChangePasswordForm.propTypes = {\r\n  onSent: PropTypes.func,\r\n  onGetPassword: PropTypes.func,\r\n  onGetConfirmPassword: PropTypes.func\r\n};\r\n\r\nexport default function ChangePasswordForm({ onSent, onGetPassword, onGetConfirmPassword }) {\r\n  const { resetPassword } = useAuth();\r\n  const isMountedRef = useIsMountedRef();\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const getCharacterValidationError = (str) => `Your password must have at least 1 ${str} character`;\r\n\r\n  const ChangePasswordSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n      .required('No password provided.')\r\n      .min(8, 'Password must have at least 8 characters')\r\n      // different error messages for different requirements\r\n      .matches(/[0-9]/, getCharacterValidationError('digit'))\r\n      .matches(/[a-z]/, getCharacterValidationError('lowercase'))\r\n      .matches(/[A-Z]/, getCharacterValidationError('uppercase')),\r\n    confirmPassword: Yup.string()\r\n      .required('Please re-type your password')\r\n      // use oneOf to match one of the values inside the array.\r\n      // use \"ref\" to get the value of passwrod.\r\n      .oneOf([Yup.ref('password')], 'Passwords does not match')\r\n  });\r\n\r\n  const UpdatePassword = async (password, token) => {\r\n    try {\r\n      const response = await axios.put(`${baseUrl}/auth/resetPassword`, {\r\n        token,\r\n        password\r\n      });\r\n      if (response.status === 200) {\r\n        sessionStorage.removeItem('email');\r\n        sessionStorage.removeItem('otp');\r\n        enqueueSnackbar('Password Changed', { variant: 'success' });\r\n        navigate('/dashboard', { replace: true });\r\n      } else {\r\n        enqueueSnackbar(response.data, { variant: 'error' });\r\n      }\r\n    } catch (error) {\r\n      enqueueSnackbar(error, { variant: 'error' });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      password: '',\r\n      confirmPassword: ''\r\n    },\r\n    validationSchema: ChangePasswordSchema,\r\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\r\n      try {\r\n        await resetPassword(values.email);\r\n        if (isMountedRef.current) {\r\n          onGetPassword(formik.values.password);\r\n          onGetConfirmPassword(formik.values.confirmPassword);\r\n          const userId = sessionStorage.getItem('email');\r\n          const token = sessionStorage.getItem('otp');\r\n          console.log(token);\r\n          // setSubmitting(false);\r\n          UpdatePassword(formik.values.password, token);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n        if (isMountedRef.current) {\r\n          setErrors({ afterSubmit: error.message });\r\n          setSubmitting(false);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n        <Stack spacing={3}>\r\n          {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\r\n\r\n          <TextField\r\n            fullWidth\r\n            {...getFieldProps('password')}\r\n            type=\"password\"\r\n            label=\"New Password\"\r\n            error={Boolean(touched.password && errors.password)}\r\n            helperText={touched.password && errors.password}\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            {...getFieldProps('confirmPassword')}\r\n            type=\"password\"\r\n            label=\"Confirm New Password\"\r\n            error={Boolean(touched.confirmPassword && errors.confirmPassword)}\r\n            helperText={touched.confirmPassword && errors.confirmPassword}\r\n          />\r\n\r\n          <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n            Change Password\r\n          </LoadingButton>\r\n        </Stack>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n","import * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { useNavigate, Link as RouterLink } from 'react-router-dom';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\nimport { useSnackbar } from 'notistack5';\r\n// material\r\nimport { TextField, Alert, Stack } from '@material-ui/core';\r\nimport { LoadingButton } from '@material-ui/lab';\r\nimport axios from 'axios';\r\n// routes\r\nimport { PATH_AUTH } from '../../../routes/paths';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\r\n\r\nconst baseUrl = process.env.PORT || 'https://digibot.co/api/v1/api';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nResetPasswordForm.propTypes = {\r\n  onSent: PropTypes.func,\r\n  onGetEmail: PropTypes.func\r\n};\r\n\r\nexport default function ResetPasswordForm({ onSent, onGetEmail }) {\r\n  const { resetPassword } = useAuth();\r\n  const isMountedRef = useIsMountedRef();\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const ResetPasswordSchema = Yup.object().shape({\r\n    email: Yup.string().email('Email must be a valid email address').required('Email is required')\r\n  });\r\n\r\n  const verifyEmail = async (email) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/auth/forgetPassword`, {\r\n        userId: email\r\n      });\r\n      if (response.status === 200) {\r\n        enqueueSnackbar('OTP Sent', { variant: 'success' });\r\n      } else {\r\n        enqueueSnackbar(response.data, { variant: 'error' });\r\n      }\r\n    } catch (error) {\r\n      enqueueSnackbar(error.message, { variant: 'error' });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: 'demo@minimals.cc'\r\n    },\r\n    validationSchema: ResetPasswordSchema,\r\n    onSubmit: async (values, { setErrors, setSubmitting }) => {\r\n      try {\r\n        await resetPassword(values.email);\r\n        if (isMountedRef.current) {\r\n          onGetEmail(formik.values.email);\r\n          sessionStorage.setItem('email', formik.values.email);\r\n          // setSubmitting(false);\r\n          verifyEmail(formik.values.email);\r\n          navigate('/auth/verify');\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n        if (isMountedRef.current) {\r\n          setErrors({ afterSubmit: error.message });\r\n          setSubmitting(false);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const { errors, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n        <Stack spacing={3}>\r\n          {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit}</Alert>}\r\n\r\n          <TextField\r\n            fullWidth\r\n            {...getFieldProps('email')}\r\n            type=\"email\"\r\n            label=\"Email address\"\r\n            error={Boolean(touched.email && errors.email)}\r\n            helperText={touched.email && errors.email}\r\n          />\r\n\r\n          <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n            Send OTP\r\n          </LoadingButton>\r\n        </Stack>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Box, Button, Container, Typography } from '@material-ui/core';\r\n// layouts\r\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\r\n// routes\r\nimport { PATH_AUTH } from '../../routes/paths';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport { ResetPasswordForm } from '../../components/authentication/reset-password';\r\n//\r\nimport { SentIcon } from '../../assets';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Page)(({ theme }) => ({\r\n  display: 'flex',\r\n  minHeight: '100%',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n  padding: theme.spacing(12, 0)\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ResetPassword() {\r\n  const [email, setEmail] = useState('');\r\n  const [sent, setSent] = useState(false);\r\n\r\n  return (\r\n    <RootStyle title=\"Reset Password | Digibot\">\r\n      <LogoOnlyLayout />\r\n\r\n      <Container>\r\n        <Box sx={{ maxWidth: 480, mx: 'auto' }}>\r\n          <>\r\n            <Typography variant=\"h3\" paragraph>\r\n              Forgot your password?\r\n            </Typography>\r\n            <Typography sx={{ color: 'text.secondary', mb: 5 }}>\r\n              Please enter the email address associated with your account and We will email you a link to reset your\r\n              password.\r\n            </Typography>\r\n\r\n            <ResetPasswordForm onSent={() => setSent(true)} onGetEmail={(value) => setEmail(value)} />\r\n\r\n            <Button fullWidth size=\"large\" component={RouterLink} to={PATH_AUTH.login} sx={{ mt: 1 }}>\r\n              Back\r\n            </Button>\r\n          </>\r\n        </Box>\r\n      </Container>\r\n    </RootStyle>\r\n  );\r\n}\r\n"],"sourceRoot":""}