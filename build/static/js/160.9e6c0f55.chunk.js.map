{"version":3,"sources":["pages/dashboard/MonthlyPerRollList.js"],"names":["MonthlyPayrollBonus","dispatch","useDispatch","monthlyPayrollBonus","useSelector","state","user","useState","page","setPage","rowsPerPage","setRowsPerPage","searchTerm","setSearchTerm","useEffect","getMonthlyPayrollBonus","incomeType","filteredData","filter","row","income_type","toLowerCase","includes","indexOfLastRow","indexOfFirstRow","currentRows","slice","console","log","title","sx","mb","width","m","display","justifyContent","label","variant","fullWidth","margin","value","onChange","e","target","minWidth","length","colSpan","alignItems","map","ind","format","Date","calculate_date","income_amt","textTransform","investment_amt","mt","mr","count","Math","ceil","event","newPage","color","showFirstButton","showLastButton","select","parseInt","SelectProps","native","option"],"mappings":"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","file":"static/js/160.9e6c0f55.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  Table,\r\n  CardHeader,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  Typography,\r\n  TableContainer,\r\n  Divider,\r\n  Box,\r\n  TextField,\r\n  Pagination\r\n} from '@material-ui/core';\r\nimport format from 'date-fns/format';\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getMonthlyPayrollBonus } from '../../redux/slices/user';\r\nimport Scrollbar from '../../components/Scrollbar';\r\n\r\nexport default function MonthlyPayrollBonus() {\r\n  const dispatch = useDispatch();\r\n  const { monthlyPayrollBonus } = useSelector((state) => state.user);\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  useEffect(() => {\r\n    const values = {\r\n      incomeType: 'MONTHLY BONUS'\r\n    };\r\n    dispatch(getMonthlyPayrollBonus(values));\r\n  }, [dispatch]);\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleRowsPerPageChange = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(1);\r\n  };\r\n\r\n  const filteredData = monthlyPayrollBonus?.filter((row) =>\r\n    row?.income_type.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  const indexOfLastRow = page * rowsPerPage;\r\n  const indexOfFirstRow = indexOfLastRow - rowsPerPage;\r\n  const currentRows = filteredData?.slice(indexOfFirstRow, indexOfLastRow);\r\n  console.log(currentRows, '7777777777');\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"Monthly Bonus List\" sx={{ mb: 3 }} />\r\n      <Scrollbar>\r\n        <TableContainer>\r\n          <Box>\r\n            <Box width={250} m={1} display=\"flex\" justifyContent=\"flex-end\">\r\n              <TextField\r\n                label=\"Search by Income Type\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                margin=\"normal\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell sx={{ minWidth: 120 }}>No.</TableCell>\r\n                <TableCell sx={{ minWidth: 160 }}>Payment Date</TableCell>\r\n                <TableCell sx={{ minWidth: 160 }}>Bussiness Month</TableCell>\r\n\r\n                <TableCell sx={{ minWidth: 200 }}>Income Amount</TableCell>\r\n\r\n                <TableCell sx={{ minWidth: 120 }}>Monthly Bussiness</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {currentRows?.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={5}>\r\n                    <Box m={4} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" sx={{ width: 'fit-content' }}>\r\n                      <Typography variant=\"h6\">No Data Found</Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                <>\r\n                  {currentRows?.map((row, ind) => (\r\n                    <TableRow key={ind}>\r\n                      <TableCell>\r\n                        <Typography variant=\"subtitle2\">{ind + 1 + indexOfFirstRow}</Typography>\r\n                      </TableCell>\r\n                      <TableCell>{format(new Date(row?.calculate_date), 'dd MMM yyyy')}</TableCell>\r\n                      <TableCell>{format(new Date(row?.calculate_date), 'dd MMM yyyy')}</TableCell>\r\n\r\n                      <TableCell>{row?.income_amt}</TableCell>\r\n\r\n                      <TableCell sx={{ textTransform: 'capitalize' }}>{row?.investment_amt}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <Box mt={2} display=\"flex\" justifyContent=\"flex-end\">\r\n          <Box mr={1}>\r\n            <Pagination\r\n              count={Math.ceil(filteredData?.length / rowsPerPage)}\r\n              page={page}\r\n              onChange={handlePageChange}\r\n              color=\"primary\"\r\n              showFirstButton\r\n              showLastButton\r\n            />\r\n          </Box>\r\n          <Box mb={2} mr={1}>\r\n            <TextField\r\n              select\r\n              variant=\"outlined\"\r\n              margin=\"normal\"\r\n              value={rowsPerPage}\r\n              onChange={handleRowsPerPageChange}\r\n              label=\"Rows per page\"\r\n              SelectProps={{\r\n                native: true\r\n              }}\r\n            >\r\n              {[10, 25, 50, 100].map((option) => (\r\n                <option key={option} value={option}>\r\n                  {option}\r\n                </option>\r\n              ))}\r\n            </TextField>\r\n          </Box>\r\n        </Box>\r\n      </Scrollbar>\r\n      <Divider />\r\n    </Card>\r\n  );\r\n}\r\n"],"sourceRoot":""}