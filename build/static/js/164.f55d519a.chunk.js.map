{"version":3,"sources":["pages/dashboard/MyLevel.js"],"names":["MyLevel","dispatch","useDispatch","directM","useSelector","state","user","useEffect","directMember","useState","searchQuery","setSearchQuery","currentPage","setCurrentPage","filteredRefArr","filter","row","member_user_id","toLowerCase","includes","totalPages","Math","ceil","length","paginatedData","slice","formatDate","inputDate","parsedDate","Date","day","getDate","month","getMonth","year","getFullYear","title","sx","mb","p","display","justifyContent","label","variant","value","onChange","e","target","eContainer","minWidth","colSpan","align","map","ind","textTransform","registration_date","position","investment_busd","status","color","count","page","event","newPage","handlePageChange"],"mappings":"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","file":"static/js/164.f55d519a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  Table,\r\n  CardHeader,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  Typography,\r\n  TableContainer,\r\n  Divider,\r\n  Box,\r\n  TextField,\r\n  Pagination\r\n} from '@material-ui/core';\r\n\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { directMember } from '../../redux/slices/user';\r\nimport Scrollbar from '../../components/Scrollbar';\r\n\r\nexport default function MyLevel() {\r\n  const dispatch = useDispatch();\r\n  const { directM } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    dispatch(directMember());\r\n  }, [dispatch]);\r\n\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const rowsPerPage = 10;\r\n\r\n  const filteredRefArr = directM?.filter((row) => row.member_user_id.toLowerCase().includes(searchQuery.toLowerCase()));\r\n\r\n  const totalPages = Math.ceil(filteredRefArr?.length / rowsPerPage);\r\n\r\n  const paginatedData = filteredRefArr?.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage);\r\n\r\n  const handlePageChange = (newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n  function formatDate(inputDate) {\r\n    const monthNames = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December'\r\n    ];\r\n\r\n    const parsedDate = new Date(inputDate);\r\n    const day = parsedDate.getDate();\r\n    const month = monthNames[parsedDate.getMonth()];\r\n    const year = parsedDate.getFullYear();\r\n\r\n    const formattedDate = `${day} ${month} ${year}`;\r\n    return formattedDate;\r\n  }\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"My Level\" sx={{ mb: 3 }} />\r\n\r\n      <Box p={2} display=\"flex\" justifyContent=\"flex-end\">\r\n        <TextField\r\n          label=\"Search\"\r\n          variant=\"outlined\"\r\n          value={searchQuery}\r\n          onChange={(e) => setSearchQuery(e.target.value)}\r\n        />\r\n      </Box>\r\n\r\n      <Scrollbar>\r\n        <TableContainer eContainer sx={{ minWidth: 720 }}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell sx={{ minWidth: 120 }}>No.</TableCell>\r\n                <TableCell sx={{ minWidth: 160 }}>Member Id</TableCell>\r\n                <TableCell sx={{ minWidth: 160 }}>Sponser Id </TableCell>\r\n                <TableCell sx={{ minWidth: 160 }}>Reg. Date</TableCell>\r\n                <TableCell sx={{ minWidth: 120 }}>Package</TableCell>\r\n\r\n                <TableCell sx={{ minWidth: 120 }}>Status</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {paginatedData?.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={6} align=\"center\">\r\n                    <Typography variant=\"h6\">No Data Found</Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                <>\r\n                  {paginatedData?.map((row, ind) => (\r\n                    <TableRow key={ind}>\r\n                      <TableCell>\r\n                        <Typography variant=\"subtitle2\">{(currentPage - 1) * rowsPerPage + ind + 1}</Typography>\r\n                      </TableCell>\r\n                      <TableCell>{row?.member_user_id}</TableCell>\r\n                      <TableCell sx={{ textTransform: 'capitalize' }}>{formatDate(row?.registration_date)}</TableCell>\r\n\r\n                      <TableCell sx={{ textTransform: 'capitalize' }}>{row?.position}</TableCell>\r\n                      <TableCell sx={{ textTransform: 'capitalize' }}>{row?.investment_busd}</TableCell>\r\n                      <TableCell sx={{ textTransform: 'capitalize' }}>\r\n                        {row?.status === 1 ? <Box color=\"green\"> Active </Box> : <Box color=\"red\"> Inactive </Box>}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Scrollbar>\r\n\r\n      <Box p={2} display=\"flex\" justifyContent=\"center\">\r\n        <Pagination\r\n          count={totalPages}\r\n          page={currentPage}\r\n          onChange={(event, newPage) => handlePageChange(newPage)}\r\n          color=\"primary\"\r\n        />\r\n      </Box>\r\n\r\n      <Divider />\r\n    </Card>\r\n  );\r\n}\r\n"],"sourceRoot":""}