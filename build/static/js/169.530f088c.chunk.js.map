{"version":3,"sources":["pages/dashboard/StoneList.js"],"names":["StoneList","dispatch","useDispatch","stoneBonus","useSelector","state","user","useEffect","getStoneBonus","incomeType","useState","page","setPage","rowsPerPage","searchTerm","setSearchTerm","filteredData","filter","row","calculate_date","toLowerCase","includes","console","log","handleChangePage","event","newPage","title","sx","mb","width","m","display","justifyContent","label","variant","size","fullWidth","value","onChange","e","target","marginBottom","marginRight","minWidth","length","colSpan","slice","map","index","format","Date","income_amt","Bonus_percent","textTransform","investment_amt","count","Math","ceil","rowsPerPageOptions","onPageChange","labelRowsPerPage","component","margin"],"mappings":"0WAsBe,SAASA,IACtB,IAAMC,EAAWC,cACTC,EAAeC,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAA5CH,WAERI,qBAAU,WACRN,EAASO,YAAc,CAAEC,WAAY,qBACpC,CAACR,IAEJ,MAAwBS,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,mBAAS,GAA/C,mBAAOG,EAAP,KACA,GADA,KACoCH,mBAAS,KAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAGMC,GAFWb,GAAc,IAEDc,QAAO,SAACC,GAAD,OAASA,EAAIC,eAAeC,cAAcC,SAASP,EAAWM,kBACnGE,QAAQC,IAAIP,EAAc,wCAC1B,IAAMQ,EAAmB,SAACC,EAAOC,GAC/Bd,EAAQc,IAQV,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAYC,MAAM,cAAcC,GAAI,CAAEC,GAAI,KAC1C,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,MAAO,IAAKC,EAAG,EAAGC,QAAQ,OAAOC,eAAe,WAArD,SACE,cAAC,IAAD,CACEC,MAAM,cACNC,QAAQ,WACRC,KAAK,QACLC,WAAS,EACTC,MAAOxB,EACPyB,SAAU,SAACC,GAAD,OAAOzB,EAAcyB,EAAEC,OAAOH,QACxCV,GAAI,CAAEc,aAAc,EAAGC,YAAa,SAK1C,cAAC,IAAD,UACE,cAAC,IAAD,CAAgBf,GAAI,CAAEgB,SAAU,KAAhC,SACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAWhB,GAAI,CAAEgB,SAAU,KAA3B,iBACA,cAAC,IAAD,CAAWhB,GAAI,CAAEgB,SAAU,KAA3B,kBACA,cAAC,IAAD,CAAWhB,GAAI,CAAEgB,SAAU,KAA3B,yBACA,cAAC,IAAD,CAAWhB,GAAI,CAAEgB,SAAU,KAA3B,+BACA,cAAC,IAAD,CAAWhB,GAAI,CAAEgB,SAAU,KAA3B,0BAGJ,cAAC,IAAD,UAC4B,KAAb,OAAZ5B,QAAY,IAAZA,OAAA,EAAAA,EAAc6B,QACb,cAAC,IAAD,UACE,cAAC,IAAD,CAAWC,QAAS,EAApB,SACE,cAAC,IAAD,CAAYX,QAAQ,KAApB,+BAIJ,0CACGnB,QADH,IACGA,OADH,EACGA,EAAc+B,OAAOpC,EAAO,GAAKE,EAAaF,EAAOE,GAAamC,KAAI,SAAC9B,EAAK+B,GAAN,OACrE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAYd,QAAQ,YAApB,SAAiCc,EAAQ,MAE3C,cAAC,IAAD,UAAYC,YAAO,IAAIC,KAAJ,OAASjC,QAAT,IAASA,OAAT,EAASA,EAAKC,gBAAiB,iBAClD,eAAC,IAAD,kBAAYD,QAAZ,IAAYA,OAAZ,EAAYA,EAAKkC,WAAjB,SACA,eAAC,IAAD,kBAAYlC,QAAZ,IAAYA,OAAZ,EAAYA,EAAKmC,cAAjB,SACA,cAAC,IAAD,CAAWzB,GAAI,CAAE0B,cAAe,cAAhC,SAC2B,QAArB,OAAHpC,QAAG,IAAHA,OAAA,EAAAA,EAAKqC,gBAA0B,eAA/B,iBAAmDrC,QAAnD,IAAmDA,OAAnD,EAAmDA,EAAKqC,eAAxD,UARUN,iBAkB7B,cAAC,IAAD,IACA,cAAC,IAAD,CACEO,MAAOC,KAAKC,MAAiB,OAAZ1C,QAAY,IAAZA,OAAA,EAAAA,EAAc6B,QAAShC,GACxCF,KAAMA,EACN4B,SAAUf,EACVmC,mBAAoB,CAAC,EAAG,GAAI,IAC5B9C,YAAaA,EACb+C,aAAcpC,EACdqC,iBAAiB,gBACjBC,UAAU,MACVlC,GAAI,CAAEmC,OAAQ,YAAa/B,QAAS,OAAQC,eAAgB","file":"static/js/169.530f088c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Divider,\r\n  TextField,\r\n  MenuItem,\r\n  Pagination,\r\n  Box\r\n} from '@material-ui/core';\r\nimport format from 'date-fns/format';\r\nimport { getStoneBonus } from '../../redux/slices/user';\r\nimport Scrollbar from '../../components/Scrollbar';\r\n\r\nexport default function StoneList() {\r\n  const dispatch = useDispatch();\r\n  const { stoneBonus } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    dispatch(getStoneBonus({ incomeType: 'STAKING BONUS' }));\r\n  }, [dispatch]);\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const stoneArr = stoneBonus || [];\r\n\r\n  const filteredData = stoneArr.filter((row) => row.calculate_date.toLowerCase().includes(searchTerm.toLowerCase()));\r\n  console.log(filteredData, 'filteredDatafilteredDatafilteredData');\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(1);\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"Trade Bonus\" sx={{ mb: 3 }} />\r\n      <Box>\r\n        <Box width={250} m={1} display=\"flex\" justifyContent=\"flex-end\">\r\n          <TextField\r\n            label=\"Search Date\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            fullWidth\r\n            value={searchTerm}\r\n            onChange={(e) => setSearchTerm(e.target.value)}\r\n            sx={{ marginBottom: 2, marginRight: 2 }}\r\n          />\r\n        </Box>\r\n      </Box>\r\n\r\n      <Scrollbar>\r\n        <TableContainer sx={{ minWidth: 720 }}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell sx={{ minWidth: 120 }}>No.</TableCell>\r\n                <TableCell sx={{ minWidth: 160 }}>Date</TableCell>\r\n                <TableCell sx={{ minWidth: 200 }}>Trade Bonus</TableCell>\r\n                <TableCell sx={{ minWidth: 120 }}>Percentage ( % ) </TableCell>\r\n                <TableCell sx={{ minWidth: 120 }}>Trading</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredData?.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={5}>\r\n                    <Typography variant=\"h6\">No Data Found</Typography>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                <>\r\n                  {filteredData?.slice((page - 1) * rowsPerPage, page * rowsPerPage).map((row, index) => (\r\n                    <TableRow key={index}>\r\n                      <TableCell>\r\n                        <Typography variant=\"subtitle2\">{index + 1}</Typography>\r\n                      </TableCell>\r\n                      <TableCell>{format(new Date(row?.calculate_date), 'dd MMM yyyy')}</TableCell>\r\n                      <TableCell>{row?.income_amt} $ </TableCell>\r\n                      <TableCell>{row?.Bonus_percent} % </TableCell>\r\n                      <TableCell sx={{ textTransform: 'capitalize' }}>\r\n                        {row?.investment_amt === null ? 'Not defined ' : `${row?.investment_amt} $`}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Scrollbar>\r\n      <Divider />\r\n      <Pagination\r\n        count={Math.ceil(filteredData?.length / rowsPerPage)}\r\n        page={page}\r\n        onChange={handleChangePage}\r\n        rowsPerPageOptions={[5, 10, 25]}\r\n        rowsPerPage={rowsPerPage}\r\n        onPageChange={handleChangePage}\r\n        labelRowsPerPage=\"Rows per page\"\r\n        component=\"div\"\r\n        sx={{ margin: '10px auto', display: 'flex', justifyContent: 'center' }}\r\n      />\r\n    </Card>\r\n  );\r\n}\r\n"],"sourceRoot":""}