{"version":3,"sources":["pages/dashboard/ReferralList.js"],"names":["ReferralList","dispatch","useDispatch","refbonus","useSelector","state","user","useState","currentPage","setCurrentPage","rowsPerPage","searchText","setSearchText","useEffect","getRefBonus","incomeType","filteredData","results","filter","row","income_type","toLowerCase","includes","totalPageCount","Math","ceil","length","title","sx","mb","width","m","display","justifyContent","fullWidth","label","value","onChange","e","target","ml","minWidth","colSpan","alignItems","variant","slice","map","index","format","Date","calculate_date","net_amt","income_member_id","income_level","Bonus_percent","count","page","event","newPage","mt"],"mappings":"0WAqBe,SAASA,IAAgB,IAAD,EAC/BC,EAAWC,cACTC,EAAaC,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAA1CH,SAER,EAAsCI,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsBF,mBAAS,IAAxBG,EAAP,oBACA,EAAoCH,mBAAS,IAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WAIRZ,EAASa,YAHM,CACbC,WAAY,oBAGb,CAACd,IAEJ,IAEMe,IAFiB,OAARb,QAAQ,IAARA,OAAA,EAAAA,EAAUc,UAAW,IAERC,QAAO,SAACC,GAAD,cAASA,QAAT,IAASA,OAAT,EAASA,EAAKC,YAAYC,cAAcC,SAASX,EAAWU,kBAEzFE,EAAiBC,KAAKC,MAAiB,OAAZT,QAAY,IAAZA,OAAA,EAAAA,EAAcU,QAAShB,GAMxD,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAYiB,MAAM,oBAAoBC,GAAI,CAAEC,GAAI,KAChD,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,MAAO,IAAKC,EAAG,EAAGC,QAAQ,OAAOC,eAAe,WAArD,SACE,cAAC,IAAD,CACEC,WAAS,EACTC,MAAM,wBACNC,MAAOzB,EACP0B,SAAU,SAACC,GAAD,OAAO1B,EAAc0B,EAAEC,OAAOH,QACxCR,GAAI,CAAEC,GAAI,EAAGW,GAAI,SAKvB,eAAC,IAAD,WACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAWZ,GAAI,CAAEa,SAAU,KAA3B,iBACA,cAAC,IAAD,CAAWb,GAAI,CAAEa,SAAU,KAA3B,kBACA,cAAC,IAAD,CAAWb,GAAI,CAAEa,SAAU,KAA3B,0BACA,cAAC,IAAD,CAAWb,GAAI,CAAEa,SAAU,KAA3B,uBACA,cAAC,IAAD,CAAWb,GAAI,CAAEa,SAAU,KAA3B,mBACA,cAAC,IAAD,CAAWb,GAAI,CAAEa,SAAU,KAA3B,8BAEA,cAAC,IAAD,SAGJ,cAAC,IAAD,UAC4B,KAAb,OAAZzB,QAAY,IAAZA,OAAA,EAAAA,EAAcU,QACb,cAAC,IAAD,UACE,cAAC,IAAD,CAAWgB,QAAS,EAApB,SACE,cAAC,IAAD,CAAKX,EAAG,EAAGC,QAAQ,OAAOC,eAAe,SAASU,WAAW,SAA7D,SACE,cAAC,IAAD,CAAYC,QAAQ,KAApB,iCAKN,0CACG5B,QADH,IACGA,GADH,UACGA,EACG6B,OAAOrC,EAAc,GAAKE,EAAaF,EAAcE,UAF3D,aACG,EAEGoC,KAAI,SAAC3B,EAAK4B,GAAN,OACJ,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAYH,QAAQ,YAApB,UAAkCpC,EAAc,GAAKE,EAAcqC,EAAQ,MAE7E,cAAC,IAAD,UAAYC,YAAO,IAAIC,KAAJ,OAAS9B,QAAT,IAASA,OAAT,EAASA,EAAK+B,gBAAiB,iBAClD,eAAC,IAAD,kBAAY/B,QAAZ,IAAYA,OAAZ,EAAYA,EAAKgC,QAAjB,SACA,eAAC,IAAD,kBAAYhC,QAAZ,IAAYA,OAAZ,EAAYA,EAAKiC,iBAAjB,OACA,eAAC,IAAD,kBAAYjC,QAAZ,IAAYA,OAAZ,EAAYA,EAAKkC,aAAjB,OACA,eAAC,IAAD,kBAAYlC,QAAZ,IAAYA,OAAZ,EAAYA,EAAKmC,cAAjB,WARaP,gBAgB7B,cAAC,IAAD,CACEQ,MAAOhC,EACPiC,KAAMhD,EACN6B,SAnEiB,SAACoB,EAAOC,GAC/BjD,EAAeiD,IAmET9B,GAAI,CAAE+B,GAAI,EAAG3B,QAAS,OAAQC,eAAgB,eAGlD,cAAC,IAAD","file":"static/js/166.011841bc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Card,\r\n  Table,\r\n  CardHeader,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  Typography,\r\n  TableContainer,\r\n  Divider,\r\n  Box,\r\n  TextField,\r\n  Pagination\r\n} from '@material-ui/core';\r\nimport format from 'date-fns/format';\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getRefBonus } from '../../redux/slices/user';\r\nimport Scrollbar from '../../components/Scrollbar';\r\n\r\nexport default function ReferralList() {\r\n  const dispatch = useDispatch();\r\n  const { refbonus } = useSelector((state) => state.user);\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [rowsPerPage] = useState(10);\r\n  const [searchText, setSearchText] = useState('');\r\n\r\n  useEffect(() => {\r\n    const values = {\r\n      incomeType: 'DIRECT BONUS'\r\n    };\r\n    dispatch(getRefBonus(values));\r\n  }, [dispatch]);\r\n\r\n  const refarr = refbonus?.results || [];\r\n\r\n  const filteredData = refarr.filter((row) => row?.income_type.toLowerCase().includes(searchText.toLowerCase()));\r\n\r\n  const totalPageCount = Math.ceil(filteredData?.length / rowsPerPage);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"Direct Bonus List\" sx={{ mb: 3 }} />\r\n      <Scrollbar>\r\n        <TableContainer>\r\n          <Box>\r\n            <Box width={250} m={1} display=\"flex\" justifyContent=\"flex-end\">\r\n              <TextField\r\n                fullWidth\r\n                label=\"Search by Income Type\"\r\n                value={searchText}\r\n                onChange={(e) => setSearchText(e.target.value)}\r\n                sx={{ mb: 2, ml: 2 }}\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell sx={{ minWidth: 120 }}>No.</TableCell>\r\n                <TableCell sx={{ minWidth: 160 }}>Date</TableCell>\r\n                <TableCell sx={{ minWidth: 200 }}>Direct Bonus</TableCell>\r\n                <TableCell sx={{ minWidth: 200 }}>From User</TableCell>\r\n                <TableCell sx={{ minWidth: 200 }}>Level</TableCell>\r\n                <TableCell sx={{ minWidth: 120 }}>Percentage ( % )</TableCell>\r\n\r\n                <TableCell />\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredData?.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={5}>\r\n                    <Box m={4} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                      <Typography variant=\"h6\">No Data Found</Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                <>\r\n                  {filteredData\r\n                    ?.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage)\r\n                    ?.map((row, index) => (\r\n                      <TableRow key={index}>\r\n                        <TableCell>\r\n                          <Typography variant=\"subtitle2\">{(currentPage - 1) * rowsPerPage + index + 1}</Typography>\r\n                        </TableCell>\r\n                        <TableCell>{format(new Date(row?.calculate_date), 'dd MMM yyyy')}</TableCell>\r\n                        <TableCell>{row?.net_amt} $ </TableCell>\r\n                        <TableCell>{row?.income_member_id} </TableCell>\r\n                        <TableCell>{row?.income_level} </TableCell>\r\n                        <TableCell>{row?.Bonus_percent} % </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                </>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <Pagination\r\n          count={totalPageCount}\r\n          page={currentPage}\r\n          onChange={handleChangePage}\r\n          sx={{ mt: 2, display: 'flex', justifyContent: 'center' }}\r\n        />\r\n      </Scrollbar>\r\n      <Divider />\r\n    </Card>\r\n  );\r\n}\r\n"],"sourceRoot":""}