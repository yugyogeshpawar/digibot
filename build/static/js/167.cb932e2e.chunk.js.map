{"version":3,"sources":["pages/dashboard/RewardBonusList.js"],"names":["ReferralList","dispatch","useDispatch","capitalBonus","useSelector","state","user","useState","page","setPage","rowsPerPage","searchTerm","setSearchTerm","useEffect","getCapitalBonus","incomeType","console","log","checkDataArr","filter","row","calculate_date","toLowerCase","includes","income_amt","toString","Bonus_percent","income_type","Math","min","length","title","sx","mb","width","m","display","justifyContent","p","label","variant","fullWidth","value","onChange","event","target","eContainer","minWidth","colSpan","alignItems","slice","map","ind","format","Date","textTransform","investment_amt","count","ceil","newPage","color","my"],"mappings":"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","file":"static/js/167.cb932e2e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Card,\r\n  Table,\r\n  CardHeader,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  Typography,\r\n  TableContainer,\r\n  Divider,\r\n  Box,\r\n  TextField,\r\n  Pagination\r\n} from '@material-ui/core';\r\nimport format from 'date-fns/format';\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getCapitalBonus } from '../../redux/slices/user';\r\nimport Scrollbar from '../../components/Scrollbar';\r\n\r\nexport default function ReferralList() {\r\n  const dispatch = useDispatch();\r\n  const { capitalBonus } = useSelector((state) => state.user);\r\n  const [page, setPage] = useState(1);\r\n  const [rowsPerPage] = useState(10);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  useEffect(() => {\r\n    const values = {\r\n      incomeType: 'MATCHING BUSINESS'\r\n    };\r\n    dispatch(getCapitalBonus(values));\r\n  }, [dispatch]);\r\n\r\n  const handleSearchChange = (event) => {\r\n    setSearchTerm(event.target.value);\r\n    setPage(1); // Reset the page to the first page when searching\r\n  };\r\n  console.log(capitalBonus, 'capitalBonuscapitalBonuscapitalBonuscapitalBonus');\r\n  const checkDataArr = capitalBonus?.filter((row) => {\r\n    if (!searchTerm) return true;\r\n    return (\r\n      row?.calculate_date.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      row?.income_amt.toString().includes(searchTerm) ||\r\n      row?.Bonus_percent.toString().includes(searchTerm) ||\r\n      row?.income_type.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n  });\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, checkDataArr?.length - (page - 1) * rowsPerPage);\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"Reward Bonus List\" sx={{ mb: 3 }} />\r\n      <Box width={250} m={1} display=\"flex\" justifyContent=\"flex-end\" sx={{ p: 2 }}>\r\n        <TextField label=\"Search\" variant=\"outlined\" fullWidth value={searchTerm} onChange={handleSearchChange} />\r\n      </Box>\r\n      <Scrollbar>\r\n        <TableContainer eContainer sx={{ minWidth: 720 }}>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell sx={{ minWidth: 120 }}>No.</TableCell>\r\n                <TableCell sx={{ minWidth: 160 }}>Date</TableCell>\r\n                <TableCell sx={{ minWidth: 200 }}>Reward Amount</TableCell>\r\n                <TableCell sx={{ minWidth: 200 }}>Matching Bussiness</TableCell>\r\n\r\n                <TableCell />\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {checkDataArr?.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={6}>\r\n                    <Box m={4} display=\"flex\" justifyContent=\"center\" alignItems=\"center\" sx={{ width: 'fit-content' }}>\r\n                      <Typography variant=\"h6\">No Data Found</Typography>\r\n                    </Box>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                <>\r\n                  {checkDataArr?.slice((page - 1) * rowsPerPage, page * rowsPerPage)?.map((row, ind) => (\r\n                    <TableRow key={ind}>\r\n                      <TableCell>\r\n                        <Typography variant=\"subtitle2\">{ind + 1 + (page - 1) * rowsPerPage}</Typography>\r\n                      </TableCell>\r\n                      <TableCell>{format(new Date(row?.calculate_date), 'dd MMM yyyy')}</TableCell>\r\n                      <TableCell>{row?.income_amt} $</TableCell>\r\n\r\n                      <TableCell sx={{ textTransform: 'capitalize' }}>{row?.investment_amt} $ </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <Pagination\r\n          count={Math.ceil(checkDataArr?.length / rowsPerPage)}\r\n          page={page}\r\n          onChange={handlePageChange}\r\n          color=\"primary\"\r\n          sx={{ my: 3, display: 'flex', justifyContent: 'center' }}\r\n        />\r\n      </Scrollbar>\r\n      <Divider />\r\n    </Card>\r\n  );\r\n}\r\n"],"sourceRoot":""}