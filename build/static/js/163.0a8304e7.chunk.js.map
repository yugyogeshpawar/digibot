{"version":3,"sources":["pages/dashboard/MyDownline.js"],"names":["MyDownLine","dispatch","useDispatch","downLineData","useSelector","state","user","console","log","useState","currentPage","setCurrentPage","rowsPerPage","searchMemberId","setSearchMemberId","formatDate","inputDate","parsedDate","Date","day","getDate","month","getMonth","year","getFullYear","useEffect","getRefBonus","incomeType","getDownline","filteredData","filter","row","member_user_id","toLowerCase","includes","startIndex","endIndex","title","sx","mb","m","width","display","justifyContent","label","fullWidth","value","onChange","e","target","component","Paper","minWidth","slice","map","index","variant","promoter_id","textTransform","position","registration_date","investment_busd","status","color","fontWeight","my","count","Math","ceil","length","page","event","newPage"],"mappings":"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","file":"static/js/163.0a8304e7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {\r\n  Card,\r\n  Table,\r\n  CardHeader,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  Typography,\r\n  TableContainer,\r\n  Divider,\r\n  Box,\r\n  TextField,\r\n  Paper,\r\n  Pagination\r\n} from '@material-ui/core';\r\n\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getDownline, getRefBonus } from '../../redux/slices/user';\r\nimport Scrollbar from '../../components/Scrollbar';\r\n\r\nexport default function MyDownLine() {\r\n  const dispatch = useDispatch();\r\n  const { downLineData } = useSelector((state) => state.user);\r\n  console.log(downLineData, 'downLineDatadownLineDatadownLineData');\r\n\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [rowsPerPage] = useState(10);\r\n  const [searchMemberId, setSearchMemberId] = useState('');\r\n\r\n  useEffect(() => {\r\n    const values = {\r\n      incomeType: 'DIRECT BONUS'\r\n    };\r\n    dispatch(getRefBonus(values));\r\n    dispatch(getDownline());\r\n  }, [dispatch]);\r\n\r\n  function formatDate(inputDate) {\r\n    const monthNames = [\r\n      'January',\r\n      'February',\r\n      'March',\r\n      'April',\r\n      'May',\r\n      'June',\r\n      'July',\r\n      'August',\r\n      'September',\r\n      'October',\r\n      'November',\r\n      'December'\r\n    ];\r\n\r\n    const parsedDate = new Date(inputDate);\r\n    const day = parsedDate.getDate();\r\n    const month = monthNames[parsedDate.getMonth()];\r\n    const year = parsedDate.getFullYear();\r\n\r\n    const formattedDate = `${day} ${month} ${year}`;\r\n    return formattedDate;\r\n  }\r\n  const downlineApisData = downLineData;\r\n\r\n  const filteredData = downlineApisData?.filter((row) =>\r\n    row?.member_user_id.toLowerCase().includes(searchMemberId.toLowerCase())\r\n  );\r\n\r\n  const handlePageChange = (event, newPage) => {\r\n    setCurrentPage(newPage);\r\n  };\r\n\r\n  const startIndex = (currentPage - 1) * rowsPerPage;\r\n  const endIndex = startIndex + rowsPerPage;\r\n  console.log(filteredData, 'ertyuiodfghjkl;');\r\n  return (\r\n    <Card>\r\n      <CardHeader title=\"My Downline\" sx={{ mb: 3 }} />\r\n      <Scrollbar>\r\n        <Box sx={{ m: 2 }}>\r\n          <Box width={250} m={1} display=\"flex\" justifyContent=\"flex-end\">\r\n            <TextField\r\n              label=\"Search by Member ID\"\r\n              fullWidth\r\n              value={searchMemberId}\r\n              onChange={(e) => setSearchMemberId(e.target.value)}\r\n            />\r\n          </Box>\r\n        </Box>\r\n        <TableContainer component={Paper} sx={{ minWidth: 720 }}>\r\n          <Table>\r\n            <TableHead>\r\n              {' '}\r\n              <TableRow>\r\n                <TableCell sx={{ minWidth: 120 }}>No.</TableCell>\r\n                <TableCell sx={{ minWidth: 160 }}>Associate Id </TableCell>\r\n\r\n                <TableCell sx={{ minWidth: 160 }}>Promoter Id</TableCell>\r\n\r\n                <TableCell sx={{ minWidth: 200 }}>Position</TableCell>\r\n                <TableCell sx={{ minWidth: 120 }}>Reg. Date</TableCell>\r\n                <TableCell sx={{ minWidth: 160 }}>Package</TableCell>\r\n\r\n                <TableCell sx={{ minWidth: 120 }}>Status</TableCell>\r\n                <TableCell />\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredData?.slice(startIndex, endIndex).map((row, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell>\r\n                    <Typography variant=\"subtitle2\">{index + 1}</Typography>\r\n                  </TableCell>\r\n\r\n                  <TableCell> {row?.member_user_id} </TableCell>\r\n\r\n                  <TableCell>{row?.promoter_id}</TableCell>\r\n\r\n                  <TableCell sx={{ textTransform: 'capitalize' }}>{row?.position}</TableCell>\r\n                  <TableCell sx={{ textTransform: 'capitalize' }}>{formatDate(row?.registration_date)}</TableCell>\r\n                  <TableCell sx={{ textTransform: 'capitalize' }}>{row?.investment_busd}</TableCell>\r\n                  <TableCell sx={{ textTransform: 'capitalize' }}>\r\n                    {row?.status === 1 ? (\r\n                      <Box color=\"green\" fontWeight={500}>\r\n                        {' '}\r\n                        Active{' '}\r\n                      </Box>\r\n                    ) : (\r\n                      <Box color=\"red\"> Inactive </Box>\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <Box sx={{ my: 2, display: 'flex', justifyContent: 'center' }}>\r\n          <Pagination\r\n            count={Math.ceil(filteredData?.length / rowsPerPage)}\r\n            page={currentPage}\r\n            onChange={handlePageChange}\r\n          />\r\n        </Box>\r\n      </Scrollbar>\r\n      <Divider />\r\n    </Card>\r\n  );\r\n}\r\n"],"sourceRoot":""}