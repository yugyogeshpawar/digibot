{"version":3,"sources":["../../src/index.ts","pages/dashboard/UserList.js"],"names":["sentenceCaseTransform","input","index","result","toLowerCase","sentenceCase","options","delimiter","transform","TABLE_HEAD","id","label","alignRight","descendingComparator","a","b","orderBy","UserList","themeStretch","useSettings","theme","useTheme","dispatch","useDispatch","userList","useSelector","state","user","useState","page","setPage","order","setOrder","selected","setSelected","setOrderBy","filterName","setFilterName","rowsPerPage","setRowsPerPage","useEffect","getUserList","emptyRows","Math","max","length","filteredUsers","array","comparator","query","stabilizedThis","map","el","sort","filter","_user","memberName","indexOf","applySortFilter","getComparator","isUserNotFound","title","maxWidth","heading","links","name","href","PATH_DASHBOARD","root","action","disabled","variant","component","RouterLink","to","newUser","startIcon","icon","plusFill","numSelected","onFilterName","event","target","value","sx","minWidth","headLabel","rowCount","onRequestSort","property","onSelectAllClick","checked","newSelecteds","n","slice","row","memberUserId","status","curentRank","teamBusiness","isVerified","isItemSelected","hover","tabIndex","role","padding","onChange","selectedIndex","newSelected","concat","handleClick","scope","direction","alignItems","spacing","alt","src","noWrap","align","textTransform","palette","mode","color","style","height","colSpan","py","searchQuery","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt"],"mappings":"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","file":"static/js/144.a92664ac.chunk.js","sourcesContent":["import { noCase, Options } from \"no-case\";\nimport { upperCaseFirst } from \"upper-case-first\";\n\nexport { Options };\n\nexport function sentenceCaseTransform(input: string, index: number) {\n  const result = input.toLowerCase();\n  if (index === 0) return upperCaseFirst(result);\n  return result;\n}\n\nexport function sentenceCase(input: string, options: Options = {}) {\n  return noCase(input, {\n    delimiter: \" \",\n    transform: sentenceCaseTransform,\n    ...options,\n  });\n}\n","import { filter } from 'lodash';\r\nimport { Icon } from '@iconify/react';\r\nimport { sentenceCase } from 'change-case';\r\nimport { useState, useEffect } from 'react';\r\nimport plusFill from '@iconify/icons-eva/plus-fill';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n// material\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport {\r\n  Card,\r\n  Table,\r\n  Stack,\r\n  Avatar,\r\n  Button,\r\n  Checkbox,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  Container,\r\n  Typography,\r\n  TableContainer,\r\n  TablePagination\r\n} from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getUserList, deleteUser } from '../../redux/slices/user';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useSettings from '../../hooks/useSettings';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport Label from '../../components/Label';\r\nimport Scrollbar from '../../components/Scrollbar';\r\nimport SearchNotFound from '../../components/SearchNotFound';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport { UserListHead, UserListToolbar, UserMoreMenu } from '../../components/_dashboard/user/list';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst TABLE_HEAD = [\r\n  { id: 'memberName', label: 'Name', alignRight: false },\r\n  { id: 'curentRank', label: 'Current Rank', alignRight: false },\r\n  { id: 'teamBusiness', label: 'Business', alignRight: false },\r\n  { id: 'isVerified', label: 'Verified', alignRight: false },\r\n  { id: 'status', label: 'Status', alignRight: false },\r\n  { id: '' }\r\n];\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction applySortFilter(array, comparator, query) {\r\n  const stabilizedThis = array?.map((el, index) => [el, index]);\r\n  stabilizedThis?.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  if (query) {\r\n    return filter(array, (_user) => _user.memberName.toLowerCase().indexOf(query.toLowerCase()) !== -1);\r\n  }\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nexport default function UserList() {\r\n  const { themeStretch } = useSettings();\r\n  const theme = useTheme();\r\n  const dispatch = useDispatch();\r\n  const { userList } = useSelector((state) => state.user);\r\n  const [page, setPage] = useState(0);\r\n  const [order, setOrder] = useState('asc');\r\n  const [selected, setSelected] = useState([]);\r\n  const [orderBy, setOrderBy] = useState('name');\r\n  const [filterName, setFilterName] = useState('');\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserList());\r\n  }, [dispatch]);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = userList.map((n) => n.name);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\r\n    }\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleFilterByName = (event) => {\r\n    setFilterName(event.target.value);\r\n  };\r\n\r\n  const handleDeleteUser = (userId) => {\r\n    dispatch(deleteUser(userId));\r\n  };\r\n\r\n  const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - userList.length) : 0;\r\n\r\n  const filteredUsers = applySortFilter(userList, getComparator(order, orderBy), filterName);\r\n\r\n  const isUserNotFound = filteredUsers.length === 0;\r\n\r\n  return (\r\n    <Page title=\"User: List | Digibot\">\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"User List\"\r\n          links={[\r\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\r\n            { name: 'User', href: PATH_DASHBOARD.user.root },\r\n            { name: 'List' }\r\n          ]}\r\n          action={\r\n            <Button\r\n              disabled\r\n              variant=\"contained\"\r\n              component={RouterLink}\r\n              to={PATH_DASHBOARD.user.newUser}\r\n              startIcon={<Icon icon={plusFill} />}\r\n            >\r\n              New User\r\n            </Button>\r\n          }\r\n        />\r\n\r\n        <Card>\r\n          <UserListToolbar numSelected={selected.length} filterName={filterName} onFilterName={handleFilterByName} />\r\n\r\n          <Scrollbar>\r\n            <TableContainer sx={{ minWidth: 800 }}>\r\n              <Table>\r\n                <UserListHead\r\n                  order={order}\r\n                  orderBy={orderBy}\r\n                  headLabel={TABLE_HEAD}\r\n                  rowCount={userList.length}\r\n                  numSelected={selected.length}\r\n                  onRequestSort={handleRequestSort}\r\n                  onSelectAllClick={handleSelectAllClick}\r\n                />\r\n                <TableBody>\r\n                  {filteredUsers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\r\n                    // const { id, name, role, status, company, isVerified } = row;\r\n                    const { memberUserId, memberName, status, curentRank, teamBusiness, isVerified } = row;\r\n                    const isItemSelected = selected.indexOf(memberName) !== -1;\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        key={memberUserId}\r\n                        tabIndex={-1}\r\n                        role=\"checkbox\"\r\n                        selected={isItemSelected}\r\n                        aria-checked={isItemSelected}\r\n                      >\r\n                        <TableCell padding=\"checkbox\">\r\n                          <Checkbox checked={isItemSelected} onChange={(event) => handleClick(event, memberName)} />\r\n                        </TableCell>\r\n                        <TableCell component=\"th\" scope=\"row\" padding=\"none\">\r\n                          <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                            <Avatar alt={memberName} src=\"avatarUrl\" />\r\n                            <Typography variant=\"subtitle2\" noWrap>\r\n                              {memberName}\r\n                            </Typography>\r\n                          </Stack>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" sx={{ textTransform: 'capitalize' }}>\r\n                          {curentRank === null ? 'Member' : curentRank}\r\n                        </TableCell>\r\n                        <TableCell align=\"left\">{teamBusiness}</TableCell>\r\n                        <TableCell align=\"left\">{isVerified ? 'Yes' : 'No'}</TableCell>\r\n                        <TableCell align=\"left\">\r\n                          <Label\r\n                            variant={theme.palette.mode === 'light' ? 'ghost' : 'filled'}\r\n                            color={(status === 'inactive' && 'error') || 'success'}\r\n                          >\r\n                            {sentenceCase(status)}\r\n                          </Label>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n                  {emptyRows > 0 && (\r\n                    <TableRow style={{ height: 53 * emptyRows }}>\r\n                      <TableCell colSpan={6} />\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n                {isUserNotFound && (\r\n                  <TableBody>\r\n                    <TableRow>\r\n                      <TableCell align=\"center\" colSpan={6} sx={{ py: 3 }}>\r\n                        <SearchNotFound searchQuery={filterName} />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  </TableBody>\r\n                )}\r\n              </Table>\r\n            </TableContainer>\r\n          </Scrollbar>\r\n\r\n          <TablePagination\r\n            rowsPerPageOptions={[5, 10, 25]}\r\n            component=\"div\"\r\n            count={userList.length}\r\n            rowsPerPage={rowsPerPage}\r\n            page={page}\r\n            onPageChange={handleChangePage}\r\n            onRowsPerPageChange={handleChangeRowsPerPage}\r\n          />\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}