{"version":3,"sources":["components/authentication/verify-code/VerifyCodeForm.js","pages/authentication/VerifyCode.js"],"names":["maxLength","object","target","value","length","slice","baseUrl","process","PORT","VerifyCodeForm","navigate","useNavigate","enqueueSnackbar","useSnackbar","VerifyCodeSchema","Yup","shape","code1","required","code2","code3","code4","code5","code6","verifyOTP","otp","a","axios","post","response","data","mesage","variant","console","log","formik","useFormik","initialValues","validationSchema","onSubmit","values","sessionStorage","setItem","errors","isValid","touched","handleSubmit","isSubmitting","getFieldProps","autoComplete","noValidate","Stack","direction","spacing","justifyContent","Object","keys","map","item","OutlinedInput","type","placeholder","onInput","error","Boolean","inputProps","sx","p","textAlign","width","xs","sm","height","FormHelperText","style","LoadingButton","fullWidth","size","mt","RootStyle","styled","Page","display","minHeight","alignItems","padding","theme","VerifyCode","ResendCode","userId","getItem","status","title","LogoOnlyLayout","Container","Box","maxWidth","mx","Button","component","RouterLink","to","PATH_AUTH","login","startIcon","icon","arrowIosBackFill","mb","Typography","paragraph","color","align","Link","cursor","onClick"],"mappings":"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","file":"static/js/152.88df92cc.chunk.js","sourcesContent":["import * as Yup from 'yup';\r\nimport { useSnackbar } from 'notistack5';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\nimport axios from 'axios';\r\n// material\r\nimport { OutlinedInput, FormHelperText, Stack } from '@material-ui/core';\r\nimport { LoadingButton } from '@material-ui/lab';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n// utils\r\nimport fakeRequest from '../../../utils/fakeRequest';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\n// eslint-disable-next-line consistent-return\r\nfunction maxLength(object) {\r\n  if (object.target.value.length > object.target.maxLength) {\r\n    return (object.target.value = object.target.value.slice(0, object.target.maxLength));\r\n  }\r\n}\r\n\r\nconst baseUrl = process.env.PORT || 'https://digibot.co/api/v1/api';\r\n\r\nexport default function VerifyCodeForm() {\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const VerifyCodeSchema = Yup.object().shape({\r\n    code1: Yup.number().required('Code is required'),\r\n    code2: Yup.number().required('Code is required'),\r\n    code3: Yup.number().required('Code is required'),\r\n    code4: Yup.number().required('Code is required'),\r\n    code5: Yup.number().required('Code is required'),\r\n    code6: Yup.number().required('Code is required')\r\n  });\r\n\r\n  const verifyOTP = async (otp) => {\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/auth/verifyPassword`, {\r\n        otp\r\n      });\r\n      if (response.data.mesage === 'otp verified') {\r\n        enqueueSnackbar('OTP Verified', { variant: 'success' });\r\n        navigate('/auth/changePassword');\r\n      } else if (response.data === 'Invalid Token!!') {\r\n        enqueueSnackbar('OTP Incorrect', { variant: 'error' });\r\n      } else {\r\n        enqueueSnackbar(response.data, { variant: 'error' });\r\n      }\r\n    } catch (error) {\r\n      enqueueSnackbar(error, { variant: 'error' });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      code1: '',\r\n      code2: '',\r\n      code3: '',\r\n      code4: '',\r\n      code5: '',\r\n      code6: ''\r\n    },\r\n    validationSchema: VerifyCodeSchema,\r\n    onSubmit: async (values) => {\r\n      // await fakeRequest(500);\r\n      console.log(values);\r\n      const otp = `${values.code1}${values.code2}${values.code3}${values.code4}${values.code5}${values.code6}`;\r\n      sessionStorage.setItem('otp', otp);\r\n      verifyOTP(otp);\r\n      // navigate(PATH_DASHBOARD.root);\r\n    }\r\n  });\r\n\r\n  const { values, errors, isValid, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n        <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\r\n          {Object.keys(values).map((item) => (\r\n            <OutlinedInput\r\n              key={item}\r\n              {...getFieldProps(item)}\r\n              type=\"number\"\r\n              placeholder=\"-\"\r\n              onInput={maxLength}\r\n              error={Boolean(touched[item] && errors[item])}\r\n              inputProps={{\r\n                maxLength: 1,\r\n                sx: {\r\n                  p: 0,\r\n                  textAlign: 'center',\r\n                  width: { xs: 36, sm: 56 },\r\n                  height: { xs: 36, sm: 56 }\r\n                }\r\n              }}\r\n            />\r\n          ))}\r\n        </Stack>\r\n\r\n        <FormHelperText error={!isValid} style={{ textAlign: 'right' }}>\r\n          {!isValid && 'Code is required'}\r\n        </FormHelperText>\r\n\r\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" sx={{ mt: 3 }}>\r\n          Verify\r\n        </LoadingButton>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n","import { Icon } from '@iconify/react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport arrowIosBackFill from '@iconify/icons-eva/arrow-ios-back-fill';\r\nimport axios from 'axios';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Box, Button, Link, Container, Typography } from '@material-ui/core';\r\nimport { useSnackbar } from 'notistack5';\r\n// layouts\r\nimport LogoOnlyLayout from '../../layouts/LogoOnlyLayout';\r\n// routes\r\nimport { PATH_AUTH } from '../../routes/paths';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport { VerifyCodeForm } from '../../components/authentication/verify-code';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Page)(({ theme }) => ({\r\n  display: 'flex',\r\n  minHeight: '100%',\r\n  alignItems: 'center',\r\n  padding: theme.spacing(12, 0)\r\n}));\r\n\r\nconst baseUrl = process.env.PORT || 'https://digibot.co/api/v1/api';\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function VerifyCode() {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const ResendCode = async () => {\r\n    const userId = sessionStorage.getItem('email');\r\n    console.log('resend code');\r\n    try {\r\n      const response = await axios.post(`${baseUrl}/auth/forgetPassword`, {\r\n        userId\r\n      });\r\n      if (response.status === 200) {\r\n        enqueueSnackbar('Code sent successfully', { variant: 'success' });\r\n      } else {\r\n        enqueueSnackbar('Please Try Again!', { variant: 'error' });\r\n      }\r\n    } catch (error) {\r\n      enqueueSnackbar('Unexpected error occurred! Please Try Again', { variant: 'error' });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <RootStyle title=\"Verify | Digibot\">\r\n      <LogoOnlyLayout />\r\n\r\n      <Container>\r\n        <Box sx={{ maxWidth: 480, mx: 'auto' }}>\r\n          <Button\r\n            size=\"small\"\r\n            component={RouterLink}\r\n            to={PATH_AUTH.login}\r\n            startIcon={<Icon icon={arrowIosBackFill} width={20} height={20} />}\r\n            sx={{ mb: 3 }}\r\n          >\r\n            Back\r\n          </Button>\r\n\r\n          <Typography variant=\"h3\" paragraph>\r\n            Please check your email!\r\n          </Typography>\r\n          <Typography sx={{ color: 'text.secondary' }}>\r\n            We have emailed a 6-digit confirmation code to acb@domain, please enter the code in below box to verify your\r\n            email.\r\n          </Typography>\r\n\r\n          <Box sx={{ mt: 5, mb: 3 }}>\r\n            <VerifyCodeForm />\r\n          </Box>\r\n\r\n          <Typography variant=\"body2\" align=\"center\">\r\n            Don’t have a code? &nbsp;{' '}\r\n            <Link style={{ color: '#1976d2', cursor: 'pointer' }} onClick={ResendCode}>\r\n              Resend code\r\n            </Link>\r\n          </Typography>\r\n        </Box>\r\n      </Container>\r\n    </RootStyle>\r\n  );\r\n}\r\n"],"sourceRoot":""}