{"version":3,"sources":["components/HeaderBreadcrumbs.js","components/_dashboard/user/UserNewForm.js","pages/dashboard/UserCreate.js"],"names":["HeaderBreadcrumbs","links","action","heading","moreLink","sx","other","mb","display","alignItems","flexGrow","variant","gutterBottom","flexShrink","mt","isString","href","target","map","noWrap","UserNewForm","isEdit","currentUser","navigate","useNavigate","enqueueSnackbar","useSnackbar","NewUserSchema","Yup","shape","name","required","email","phoneNumber","address","country","company","state","city","role","avatarUrl","formik","useFormik","enableReinitialize","initialValues","zipCode","isVerified","status","validationSchema","onSubmit","values","a","setSubmitting","resetForm","setErrors","fakeRequest","PATH_DASHBOARD","user","list","console","error","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","handleDrop","useCallback","acceptedFiles","file","preview","URL","createObjectURL","value","noValidate","autoComplete","Grid","container","spacing","item","xs","md","Card","py","px","Label","color","textTransform","position","top","right","Box","accept","maxSize","onDrop","Boolean","caption","Typography","mx","textAlign","fData","FormHelperText","FormControlLabel","labelPlacement","control","Switch","onChange","event","checked","label","width","justifyContent","p","Stack","direction","sm","TextField","fullWidth","helperText","select","placeholder","SelectProps","native","countries","option","code","LoadingButton","type","loading","UserCreate","themeStretch","useSettings","dispatch","useDispatch","pathname","useLocation","useParams","userList","useSelector","includes","find","paramCase","useEffect","getUserList","Page","title","Container","maxWidth","root"],"mappings":"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","file":"static/js/129.cf364261.chunk.js","sourcesContent":["import { isString } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n// material\r\nimport { Box, Typography, Link } from '@material-ui/core';\r\n//\r\nimport { MBreadcrumbs } from './@material-extend';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nHeaderBreadcrumbs.propTypes = {\r\n  links: PropTypes.array,\r\n  action: PropTypes.node,\r\n  heading: PropTypes.string.isRequired,\r\n  moreLink: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\r\n  sx: PropTypes.object\r\n};\r\n\r\nexport default function HeaderBreadcrumbs({ links, action, heading, moreLink = '' || [], sx, ...other }) {\r\n  return (\r\n    <Box sx={{ mb: 5, ...sx }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            {heading}\r\n          </Typography>\r\n          <MBreadcrumbs links={links} {...other} />\r\n        </Box>\r\n\r\n        {action && <Box sx={{ flexShrink: 0 }}>{action}</Box>}\r\n      </Box>\r\n\r\n      <Box sx={{ mt: 2 }}>\r\n        {isString(moreLink) ? (\r\n          <Link href={moreLink} target=\"_blank\" variant=\"body2\">\r\n            {moreLink}\r\n          </Link>\r\n        ) : (\r\n          moreLink.map((href) => (\r\n            <Link noWrap key={href} href={href} variant=\"body2\" target=\"_blank\" sx={{ display: 'table' }}>\r\n              {href}\r\n            </Link>\r\n          ))\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n","import * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { useCallback } from 'react';\r\nimport { useSnackbar } from 'notistack5';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\n// material\r\nimport { LoadingButton } from '@material-ui/lab';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Grid,\r\n  Stack,\r\n  Switch,\r\n  TextField,\r\n  Typography,\r\n  FormHelperText,\r\n  FormControlLabel\r\n} from '@material-ui/core';\r\n// utils\r\nimport { fData } from '../../../utils/formatNumber';\r\nimport fakeRequest from '../../../utils/fakeRequest';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\nimport Label from '../../Label';\r\nimport { UploadAvatar } from '../../upload';\r\nimport countries from './countries';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nUserNewForm.propTypes = {\r\n  isEdit: PropTypes.bool,\r\n  currentUser: PropTypes.object\r\n};\r\n\r\nexport default function UserNewForm({ isEdit, currentUser }) {\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const NewUserSchema = Yup.object().shape({\r\n    name: Yup.string().required('Name is required'),\r\n    email: Yup.string().required('Email is required').email(),\r\n    phoneNumber: Yup.string().required('Phone number is required'),\r\n    address: Yup.string().required('Address is required'),\r\n    country: Yup.string().required('country is required'),\r\n    company: Yup.string().required('Company is required'),\r\n    state: Yup.string().required('State is required'),\r\n    city: Yup.string().required('City is required'),\r\n    role: Yup.string().required('Role Number is required'),\r\n    avatarUrl: Yup.mixed().required('Avatar is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      name: currentUser?.name || '',\r\n      email: currentUser?.email || '',\r\n      phoneNumber: currentUser?.phoneNumber || '',\r\n      address: currentUser?.address || '',\r\n      country: currentUser?.country || '',\r\n      state: currentUser?.state || '',\r\n      city: currentUser?.city || '',\r\n      zipCode: currentUser?.zipCode || '',\r\n      56: currentUser?.avatarUrl || null,\r\n      isVerified: currentUser?.isVerified || true,\r\n      status: currentUser?.status,\r\n      company: currentUser?.company || '',\r\n      role: currentUser?.role || ''\r\n    },\r\n    validationSchema: NewUserSchema,\r\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\r\n      try {\r\n        await fakeRequest(500);\r\n        resetForm();\r\n        setSubmitting(false);\r\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\r\n        navigate(PATH_DASHBOARD.user.list);\r\n      } catch (error) {\r\n        console.error(error);\r\n        setSubmitting(false);\r\n        setErrors(error);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\r\n\r\n  const handleDrop = useCallback(\r\n    (acceptedFiles) => {\r\n      const file = acceptedFiles[0];\r\n      if (file) {\r\n        setFieldValue('avatarUrl', {\r\n          ...file,\r\n          preview: URL.createObjectURL(file)\r\n        });\r\n      }\r\n    },\r\n    [setFieldValue]\r\n  );\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={4}>\r\n            <Card sx={{ py: 10, px: 3 }}>\r\n              {isEdit && (\r\n                <Label\r\n                  color={values.status !== 'active' ? 'error' : 'success'}\r\n                  sx={{ textTransform: 'uppercase', position: 'absolute', top: 24, right: 24 }}\r\n                >\r\n                  {values.status}\r\n                </Label>\r\n              )}\r\n\r\n              <Box sx={{ mb: 5 }}>\r\n                <UploadAvatar\r\n                  accept=\"image/*\"\r\n                  file={values.avatarUrl}\r\n                  maxSize={3145728}\r\n                  onDrop={handleDrop}\r\n                  error={Boolean(touched.avatarUrl && errors.avatarUrl)}\r\n                  caption={\r\n                    <Typography\r\n                      variant=\"caption\"\r\n                      sx={{\r\n                        mt: 2,\r\n                        mx: 'auto',\r\n                        display: 'block',\r\n                        textAlign: 'center',\r\n                        color: 'text.secondary'\r\n                      }}\r\n                    >\r\n                      Allowed *.jpeg, *.jpg, *.png, *.gif\r\n                      <br /> max size of {fData(3145728)}\r\n                    </Typography>\r\n                  }\r\n                />\r\n                <FormHelperText error sx={{ px: 2, textAlign: 'center' }}>\r\n                  {touched.avatarUrl && errors.avatarUrl}\r\n                </FormHelperText>\r\n              </Box>\r\n\r\n              {isEdit && (\r\n                <FormControlLabel\r\n                  labelPlacement=\"start\"\r\n                  control={\r\n                    <Switch\r\n                      onChange={(event) => setFieldValue('status', event.target.checked ? 'banned' : 'active')}\r\n                      checked={values.status !== 'active'}\r\n                    />\r\n                  }\r\n                  label={\r\n                    <>\r\n                      <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\r\n                        Banned\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n                        Apply disable account\r\n                      </Typography>\r\n                    </>\r\n                  }\r\n                  sx={{ mx: 0, mb: 3, width: 1, justifyContent: 'space-between' }}\r\n                />\r\n              )}\r\n\r\n              <FormControlLabel\r\n                labelPlacement=\"start\"\r\n                control={<Switch {...getFieldProps('isVerified')} checked={values.isVerified} />}\r\n                label={\r\n                  <>\r\n                    <Typography variant=\"subtitle2\" sx={{ mb: 0.5 }}>\r\n                      Email Verified\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\r\n                      Disabling this will automatically send the user a verification email\r\n                    </Typography>\r\n                  </>\r\n                }\r\n                sx={{ mx: 0, width: 1, justifyContent: 'space-between' }}\r\n              />\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} md={8}>\r\n            <Card sx={{ p: 3 }}>\r\n              <Stack spacing={3}>\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Full Name\"\r\n                    {...getFieldProps('name')}\r\n                    error={Boolean(touched.name && errors.name)}\r\n                    helperText={touched.name && errors.name}\r\n                  />\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Email Address\"\r\n                    {...getFieldProps('email')}\r\n                    error={Boolean(touched.email && errors.email)}\r\n                    helperText={touched.email && errors.email}\r\n                  />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Phone Number\"\r\n                    {...getFieldProps('phoneNumber')}\r\n                    error={Boolean(touched.phoneNumber && errors.phoneNumber)}\r\n                    helperText={touched.phoneNumber && errors.phoneNumber}\r\n                  />\r\n                  <TextField\r\n                    select\r\n                    fullWidth\r\n                    label=\"Country\"\r\n                    placeholder=\"Country\"\r\n                    {...getFieldProps('country')}\r\n                    SelectProps={{ native: true }}\r\n                    error={Boolean(touched.country && errors.country)}\r\n                    helperText={touched.country && errors.country}\r\n                  >\r\n                    <option value=\"\" />\r\n                    {countries.map((option) => (\r\n                      <option key={option.code} value={option.label}>\r\n                        {option.label}\r\n                      </option>\r\n                    ))}\r\n                  </TextField>\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"State/Region\"\r\n                    {...getFieldProps('state')}\r\n                    error={Boolean(touched.state && errors.state)}\r\n                    helperText={touched.state && errors.state}\r\n                  />\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"City\"\r\n                    {...getFieldProps('city')}\r\n                    error={Boolean(touched.city && errors.city)}\r\n                    helperText={touched.city && errors.city}\r\n                  />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Address\"\r\n                    {...getFieldProps('address')}\r\n                    error={Boolean(touched.address && errors.address)}\r\n                    helperText={touched.address && errors.address}\r\n                  />\r\n                  <TextField fullWidth label=\"Zip/Code\" {...getFieldProps('zipCode')} />\r\n                </Stack>\r\n\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Company\"\r\n                    {...getFieldProps('company')}\r\n                    error={Boolean(touched.company && errors.company)}\r\n                    helperText={touched.company && errors.company}\r\n                  />\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Role\"\r\n                    {...getFieldProps('role')}\r\n                    error={Boolean(touched.role && errors.role)}\r\n                    helperText={touched.role && errors.role}\r\n                  />\r\n                </Stack>\r\n\r\n                <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\r\n                  <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n                    {!isEdit ? 'Create User' : 'Save Changes'}\r\n                  </LoadingButton>\r\n                </Box>\r\n              </Stack>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { paramCase } from 'change-case';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\n// material\r\nimport { Container } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getUserList } from '../../redux/slices/user';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useSettings from '../../hooks/useSettings';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport UserNewForm from '../../components/_dashboard/user/UserNewForm';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function UserCreate() {\r\n  const { themeStretch } = useSettings();\r\n  const dispatch = useDispatch();\r\n  const { pathname } = useLocation();\r\n  const { name } = useParams();\r\n  const { userList } = useSelector((state) => state.user);\r\n  const isEdit = pathname.includes('edit');\r\n  const currentUser = userList.find((user) => paramCase(user.name) === name);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserList());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Page title=\"User: Create a new user | Digibot\">\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading={!isEdit ? 'Create a new user' : 'Edit user'}\r\n          links={[\r\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\r\n            { name: 'User', href: PATH_DASHBOARD.user.root },\r\n            { name: !isEdit ? 'New user' : name }\r\n          ]}\r\n        />\r\n\r\n        <UserNewForm isEdit={isEdit} currentUser={currentUser} />\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"],"sourceRoot":""}